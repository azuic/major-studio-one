{"ast":null,"code":"import _slicedToArray from \"/Users/zuic/WebstormProjects/major-studio-1/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const _window = window,\n        width = _window.innerWidth,\n        height = _window.innerHeight;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const _useState = useState(getWindowDimensions()),\n        _useState2 = _slicedToArray(_useState, 2),\n        windowDimensions = _useState2[0],\n        setWindowDimensions = _useState2[1];\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return windowDimensions;\n}\n\nlet rgbToHex = rgb => {\n  let hex = Number(rgb).toString(16);\n\n  if (hex.length < 2) {\n    hex = \"0\" + hex;\n  }\n\n  return hex;\n};\n\nexport var fullColorHex = (r, g, b) => {\n  let red = rgbToHex(r);\n  let green = rgbToHex(g);\n  let blue = rgbToHex(b);\n  return red + green + blue;\n};\nexport var scale = (num, in_min, in_max, out_min, out_max) => {\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}; // var w = window.innerWidth;\n// var h = window.innerHeight;","map":{"version":3,"sources":["/Users/zuic/WebstormProjects/major-studio-1/src/components/Helpers.js"],"names":["useState","useEffect","getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","rgbToHex","rgb","hex","Number","toString","length","fullColorHex","r","g","b","red","green","blue","scale","num","in_min","in_max","out_min","out_max"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,mBAAT,GAA+B;AAAA,kBACwBC,MADxB;AAAA,QACPC,KADO,WACnBC,UADmB;AAAA,QACaC,MADb,WACAC,WADA;AAE3B,SAAO;AACHH,IAAAA,KADG;AAEHE,IAAAA;AAFG,GAAP;AAIH;;AAED,eAAe,SAASE,mBAAT,GAA+B;AAAA,oBACMR,QAAQ,CAACE,mBAAmB,EAApB,CADd;AAAA;AAAA,QACnCO,gBADmC;AAAA,QACjBC,mBADiB;;AAG1CT,EAAAA,SAAS,CAAC,MAAM;AACZ,aAASU,YAAT,GAAwB;AACpBD,MAAAA,mBAAmB,CAACR,mBAAmB,EAApB,CAAnB;AACH;;AAEDC,IAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMR,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACH,GAPQ,EAON,EAPM,CAAT;AASA,SAAOF,gBAAP;AACH;;AAED,IAAIK,QAAQ,GAAKC,GAAD,IAAQ;AACpB,MAAIC,GAAG,GAAGC,MAAM,CAACF,GAAD,CAAN,CAAYG,QAAZ,CAAqB,EAArB,CAAV;;AACA,MAAIF,GAAG,CAACG,MAAJ,GAAa,CAAjB,EAAoB;AAChBH,IAAAA,GAAG,GAAG,MAAMA,GAAZ;AACH;;AACD,SAAOA,GAAP;AACH,CAND;;AAQA,OAAO,IAAII,YAAY,GAAG,CAACC,CAAD,EAAGC,CAAH,EAAKC,CAAL,KAAU;AAChC,MAAIC,GAAG,GAAGV,QAAQ,CAACO,CAAD,CAAlB;AACA,MAAII,KAAK,GAAGX,QAAQ,CAACQ,CAAD,CAApB;AACA,MAAII,IAAI,GAAGZ,QAAQ,CAACS,CAAD,CAAnB;AACA,SAAOC,GAAG,GAACC,KAAJ,GAAUC,IAAjB;AACH,CALM;AAQP,OAAO,IAAIC,KAAK,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,MAAd,EAAsBC,OAAtB,EAA+BC,OAA/B,KAA2C;AAC1D,SAAO,CAACJ,GAAG,GAAGC,MAAP,KAAkBG,OAAO,GAAGD,OAA5B,KAAwCD,MAAM,GAAGD,MAAjD,IAA2DE,OAAlE;AACH,CAFM,C,CAGP;AACA","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nexport default function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}\n\nlet rgbToHex =  (rgb)=> {\n    let hex = Number(rgb).toString(16);\n    if (hex.length < 2) {\n        hex = \"0\" + hex;\n    }\n    return hex;\n};\n\nexport var fullColorHex = (r,g,b)=> {\n    let red = rgbToHex(r);\n    let green = rgbToHex(g);\n    let blue = rgbToHex(b);\n    return red+green+blue;\n};\n\n\nexport var scale = (num, in_min, in_max, out_min, out_max) => {\n    return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n// var w = window.innerWidth;\n// var h = window.innerHeight;"]},"metadata":{},"sourceType":"module"}